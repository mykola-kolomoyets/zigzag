{"ast":null,"code":"var _jsxFileName = \"/Users/pc/KolomoyetsProjects/Study/project-zigzag/project-zigzag/client/src/views/game/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect } from \"react\";\nimport StatsService from \"../../api/services/stats\";\nimport Row from \"../../components/row\";\nimport AppContext from \"../../store/context/app\";\nimport GameContext from \"../../store/context/game\";\nimport StatsContext from \"../../store/context/stats\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const checkRow = (content, row, column, field, lastTry) => {\n  let isAllowedToGo = true;\n\n  if (lastTry.row != undefined && lastTry.column != undefined) {\n    const deltaX = Math.abs(column - lastTry.column);\n    const deltaY = Math.abs(row - lastTry.row);\n    isAllowedToGo = Number(content) === 0 && (deltaX === 2 && deltaY === 1 || deltaX === 1 && deltaY === 2);\n  }\n\n  return isAllowedToGo;\n};\n\nconst getTotalAvaliableMoves = (field, row, column) => {\n  const avaliableMoves = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [-1, 2], [1, -2], [-1, -2]];\n  let totalMoves = 0;\n  avaliableMoves.forEach(_ref => {\n    let [moveRows, moveColumns] = _ref;\n    const newRow = row + moveRows;\n    const newColumn = column + moveColumns;\n\n    if (newRow >= 0 && newRow < field.length && newColumn >= 0 && newColumn < field[0].length) {\n      if (field[newRow][newColumn] === '0') totalMoves++;\n    }\n  });\n  return totalMoves;\n};\n\nconst checkWin = field => {\n  const isWin = field.reduce((acc, curr) => {\n    return acc || curr.every(el => el !== '0');\n  }, false);\n  return isWin;\n};\n\nconst Game = _ref2 => {\n  _s();\n\n  let {\n    onFinish\n  } = _ref2;\n  const {\n    data: {\n      fieldSize,\n      field,\n      currentNumber\n    },\n    setData: setGameData\n  } = GameContext.useContext();\n  const {\n    data: {\n      user: {\n        _id: id\n      }\n    },\n    setData: setAppData\n  } = AppContext.useContext();\n  const {\n    setData: setStatsData\n  } = StatsContext.useContext();\n\n  const onCellClick = (row, column, field, lastTry) => {\n    const fieldCopy = field.slice();\n    const nextNumber = lastTry !== null && lastTry !== void 0 && lastTry.number ? Number(fieldCopy[lastTry.row][lastTry.column]) + 1 : 1;\n    fieldCopy[row][column] = nextNumber.toString();\n    setGameData({\n      field: fieldCopy,\n      lastTry: {\n        row,\n        column,\n        number: nextNumber,\n        moves: lastTry.moves + 1\n      }\n    });\n    const availableMoves = getTotalAvaliableMoves(fieldCopy, row, column);\n\n    if (availableMoves === 0) {\n      onFinish();\n      const alertText = checkWin(field) ? 'YOU WIN!' : 'YOU LOSE!';\n      alert(alertText); // === TODO:\n      // === PUSH results of lastGame on the server\n\n      const onUpdate = () => {\n        StatsService.update(id, {\n          totalGames: 0,\n          moves: 0,\n          bestGame: {\n            time: 0,\n            field: {\n              width: 0,\n              height: 0\n            }\n          }\n        }).then(res => {\n          const {\n            data\n          } = res;\n          console.log(data);\n          setStatsData(data);\n        });\n      };\n    }\n  };\n\n  useEffect(() => {\n    const field = Array(fieldSize.width).fill('0').map(() => Array(fieldSize.height).fill('0'));\n    setGameData({\n      field,\n      onCellClick\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fieldSize]);\n  const rows = useCallback(() => field.map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n    content: row,\n    number: index\n  }, `row${index}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this)), [field])();\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: rows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"1plKNjritVDNGKlpMWQOiP/oGGE=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/pc/KolomoyetsProjects/Study/project-zigzag/project-zigzag/client/src/views/game/index.tsx"],"names":["useCallback","useEffect","StatsService","Row","AppContext","GameContext","StatsContext","checkRow","content","row","column","field","lastTry","isAllowedToGo","undefined","deltaX","Math","abs","deltaY","Number","getTotalAvaliableMoves","avaliableMoves","totalMoves","forEach","moveRows","moveColumns","newRow","newColumn","length","checkWin","isWin","reduce","acc","curr","every","el","Game","onFinish","data","fieldSize","currentNumber","setData","setGameData","useContext","user","_id","id","setAppData","setStatsData","onCellClick","fieldCopy","slice","nextNumber","number","toString","moves","availableMoves","alertText","alert","onUpdate","update","totalGames","bestGame","time","width","height","then","res","console","log","Array","fill","map","rows","index"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, FC } from \"react\";\nimport StatsService from \"../../api/services/stats\";\n\nimport Row from \"../../components/row\";\nimport AppContext from \"../../store/context/app\";\n\nimport GameContext from \"../../store/context/game\";\nimport StatsContext from \"../../store/context/stats\";\nimport { Try } from \"../../utils\";\n\nexport const checkRow = (content: string, row: number, column: number, field: string[][], lastTry: Try): boolean => {\n  let isAllowedToGo = true;\n\n  if (lastTry.row != undefined && lastTry.column != undefined) {\n    const deltaX = Math.abs(column - lastTry.column);\n    const deltaY = Math.abs(row - lastTry.row);\n\n    isAllowedToGo = Number(content) === 0 && (\n      ((deltaX === 2) && (deltaY === 1)) ||\n      ((deltaX === 1) && (deltaY === 2)));\n  }\n\n  return isAllowedToGo;\n}\n\nconst getTotalAvaliableMoves = (field: string[][], row: number, column: number): number => {\n  const avaliableMoves = [\n    [2,1],\n    [2, -1],\n    [-2,1],\n    [-2, -1],\n\n    [1, 2],\n    [-1, 2],\n    [1, -2],\n    [-1, -2],\n  ];\n\n  let totalMoves = 0;\n\n  avaliableMoves.forEach(([moveRows, moveColumns]) => {\n    const newRow = row! + moveRows;\n    const newColumn = column! + moveColumns;\n\n    if (\n      (newRow >= 0 && newRow < field.length) &&\n      (newColumn >= 0 && newColumn < field[0].length)\n    ) {\n      if (field[newRow][newColumn] === '0') totalMoves++;\n    }\n  });\n\n  return totalMoves;\n}\n\nconst checkWin = (field: string[][]): boolean => {\n  const isWin = field.reduce((acc, curr) => {\n    return acc || curr.every(el => el !== '0')\n  }, false);\n\n  return isWin;\n}\n\ntype GameProps = {\n  onFinish: () => void\n}\nconst Game: FC<GameProps> = ({ onFinish }) => {\n  const { data: {\n    fieldSize,\n    field,\n    currentNumber,\n  }, setData: setGameData } = GameContext.useContext();\n  const { data: { user: { _id: id } }, setData: setAppData } = AppContext.useContext();\n  const { setData: setStatsData } = StatsContext.useContext();\n\n  const onCellClick = (row: number, column: number, field: string[][], lastTry: Try) => {\n    const fieldCopy = field.slice();\n\n    const nextNumber = (lastTry?.number) ?\n      Number(fieldCopy[lastTry.row!][lastTry.column!]) + 1 :\n      1;\n\n    fieldCopy[row][column] = nextNumber.toString();\n\n    setGameData({\n      field: fieldCopy,\n      lastTry: {\n        row,\n        column,\n        number: nextNumber,\n        moves: lastTry.moves + 1\n      }\n    });\n\n    const availableMoves = getTotalAvaliableMoves(fieldCopy, row, column);\n\n    if (availableMoves === 0) {\n      onFinish();\n\n      const alertText = checkWin(field) ? 'YOU WIN!' : 'YOU LOSE!';\n\n      alert(alertText);\n\n      // === TODO:\n      // === PUSH results of lastGame on the server\n      const onUpdate = () => {\n        StatsService.update(id!, {\n          totalGames: 0,\n          moves: 0,\n          bestGame: {\n            time: 0,\n            field: {\n              width: 0,\n              height: 0\n            }\n          }\n        })\n        .then(res => {\n          const { data } = res;\n          console.log(data);\n          setStatsData(data);\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    const field = Array(fieldSize.width).fill('0').map(() => Array(fieldSize.height).fill('0'));\n\n    setGameData({\n      field,\n      onCellClick\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fieldSize]);\n\n\n  const rows = useCallback(() => field.map((row, index) => (\n    <Row key={`row${index}`} content={row} number={index} />))\n    , [field])();\n\n  return (\n    <section>\n      {rows}\n    </section>\n  )\n};\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}