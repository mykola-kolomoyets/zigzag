{"ast":null,"code":"var _jsxFileName = \"/Users/pc/KolomoyetsProjects/Study/project-zigzag/project-zigzag/client/src/components/cell/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport classnames from 'classnames';\nimport GameContext from \"../../store/context/game\";\nimport './cell.scss';\nimport { checkRow } from \"../../views/game\";\nimport AppContext from \"../../store/context/app\";\nimport { Difficulty } from \"../../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cell = _ref => {\n  _s();\n\n  let {\n    content,\n    row,\n    column\n  } = _ref;\n  const {\n    data: {\n      onCellClick,\n      field,\n      lastTry\n    }\n  } = GameContext.useContext();\n  const {\n    data: {\n      difficulty\n    }\n  } = AppContext.useContext();\n  const [classes, setClasses] = useState('');\n  const isAllowedToGo = checkRow(content, row, column, field, lastTry);\n  useEffect(() => {\n    setClasses(classnames('cell__container', {\n      'cell__available': difficulty === Difficulty.easy && isAllowedToGo,\n      'cell__filled': Number(content) !== 0\n    }));\n  }, [difficulty, content, isAllowedToGo, field, lastTry]);\n  const onClick = useCallback(() => {\n    if (isAllowedToGo) return onCellClick(row, column, field, lastTry);\n    return {};\n  }, [isAllowedToGo, field, lastTry]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes,\n    onClick: onClick,\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cell, \"9tbZavgqquzZog0PijSZ0AbQ1wE=\");\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/pc/KolomoyetsProjects/Study/project-zigzag/project-zigzag/client/src/components/cell/index.tsx"],"names":["useCallback","useEffect","useState","classnames","GameContext","checkRow","AppContext","Difficulty","Cell","content","row","column","data","onCellClick","field","lastTry","useContext","difficulty","classes","setClasses","isAllowedToGo","easy","Number","onClick"],"mappings":";;;AAAA,SAAaA,WAAb,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,aAAP;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,UAAT,QAA2B,aAA3B;;;AAQA,MAAMC,IAAmB,GAAG,QAA8B;AAAA;;AAAA,MAA7B;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,GAAX;AAAgBC,IAAAA;AAAhB,GAA6B;AACxD,QAAM;AAAEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,KAAf;AAAsBC,MAAAA;AAAtB;AAAR,MAA4CX,WAAW,CAACY,UAAZ,EAAlD;AACA,QAAM;AAAEJ,IAAAA,IAAI,EAAE;AAAEK,MAAAA;AAAF;AAAR,MAA2BX,UAAU,CAACU,UAAX,EAAjC;AAEA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAMkB,aAAa,GAAGf,QAAQ,CAACI,OAAD,EAAUC,GAAV,EAAeC,MAAf,EAAuBG,KAAvB,EAA8BC,OAA9B,CAA9B;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,UAAU,CAAChB,UAAU,CAAC,iBAAD,EAAoB;AACvC,yBAAmBc,UAAU,KAAKV,UAAU,CAACc,IAA1B,IAAkCD,aADd;AAEvC,sBAAgBE,MAAM,CAACb,OAAD,CAAN,KAAoB;AAFG,KAApB,CAAX,CAAV;AAID,GALQ,EAKN,CAACQ,UAAD,EAAaR,OAAb,EAAsBW,aAAtB,EAAqCN,KAArC,EAA4CC,OAA5C,CALM,CAAT;AAOA,QAAMQ,OAAO,GAAGvB,WAAW,CAAC,MAAM;AAChC,QAAIoB,aAAJ,EAAmB,OAAOP,WAAW,CAACH,GAAD,EAAMC,MAAN,EAAcG,KAAd,EAAqBC,OAArB,CAAlB;AACnB,WAAO,EAAP;AACD,GAH0B,EAGxB,CAACK,aAAD,EAAgBN,KAAhB,EAAuBC,OAAvB,CAHwB,CAA3B;AAKA,sBACE;AACE,IAAA,SAAS,EAAEG,OADb;AAEE,IAAA,OAAO,EAAEK,OAFX;AAAA,cAIGd;AAJH;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CA5BD;;GAAMD,I;;KAAAA,I;AA8BN,eAAeA,IAAf","sourcesContent":["import { FC, useCallback, useEffect, useState } from \"react\";\nimport classnames from 'classnames';\n\nimport GameContext from \"../../store/context/game\";\n\nimport './cell.scss';\nimport { checkRow } from \"../../views/game\";\nimport AppContext from \"../../store/context/app\";\nimport { Difficulty } from \"../../utils\";\n\ntype CellProps = {\n  content: string;\n  column: number;\n  row: number;\n};\n\nconst Cell: FC<CellProps> = ({ content, row, column }) => {\n  const { data: { onCellClick, field, lastTry } } = GameContext.useContext();\n  const { data: { difficulty } } = AppContext.useContext();\n\n  const [classes, setClasses] = useState('');\n\n  const isAllowedToGo = checkRow(content, row, column, field, lastTry);\n\n  useEffect(() => {\n    setClasses(classnames('cell__container', {\n      'cell__available': difficulty === Difficulty.easy && isAllowedToGo,\n      'cell__filled': Number(content) !== 0\n    }));\n  }, [difficulty, content, isAllowedToGo, field, lastTry]);\n\n  const onClick = useCallback(() => {\n    if (isAllowedToGo) return onCellClick(row, column, field, lastTry);\n    return {};\n  }, [isAllowedToGo, field, lastTry]);\n\n  return (\n    <div\n      className={classes}\n      onClick={onClick}\n    >\n      {content}\n    </div>\n  )\n};\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}