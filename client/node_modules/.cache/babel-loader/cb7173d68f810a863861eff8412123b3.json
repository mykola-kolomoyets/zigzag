{"ast":null,"code":"var _jsxFileName = \"/Users/pc/KolomoyetsProjects/Study/project-zigzag/project-zigzag/client/src/views/game/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport Row from \"../../components/row\";\nimport GameContext from \"../../store/context/game\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const {\n    data: {\n      fieldSize,\n      field,\n      currentNumber\n    },\n    setData: setGameData\n  } = GameContext.useContext();\n  const onCellClick = useCallback(() => (row, column) => {\n    console.log(row, column, field);\n\n    if (field.length && field[0].length) {\n      const fieldCopy = field.slice();\n      fieldCopy[row][column] = currentNumber.toString();\n      console.log(fieldCopy, row, column);\n      setGameData({\n        field: fieldCopy,\n        currentNumber: currentNumber + 1\n      });\n    }\n  }, [field]);\n  useEffect(() => {\n    const field = Array(fieldSize.height).fill(Array(fieldSize.width).fill('0'));\n    console.log(field);\n    setGameData({\n      field,\n      onCellClick\n    });\n  }, [onCellClick, field]);\n  const rows = useMemo(() => field.map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n    content: row,\n    number: index\n  }, `row${index}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this)), [field]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: rows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"AS42YIvHtBm+7cLoumBCmUU6MD0=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/pc/KolomoyetsProjects/Study/project-zigzag/project-zigzag/client/src/views/game/index.tsx"],"names":["useCallback","useEffect","useMemo","Row","GameContext","Game","data","fieldSize","field","currentNumber","setData","setGameData","useContext","onCellClick","row","column","console","log","length","fieldCopy","slice","toString","Array","height","fill","width","rows","map","index"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,OAAjC,QAAqD,OAArD;AAEA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;;;AAEA,MAAMC,IAAS,GAAG,MAAM;AAAA;;AAEtB,QAAM;AAAEC,IAAAA,IAAI,EAAE;AACZC,MAAAA,SADY;AAEZC,MAAAA,KAFY;AAGZC,MAAAA;AAHY,KAAR;AAIHC,IAAAA,OAAO,EAAEC;AAJN,MAIsBP,WAAW,CAACQ,UAAZ,EAJ5B;AAMA,QAAMC,WAAW,GAAGb,WAAW,CAAC,MAAM,CAACc,GAAD,EAAcC,MAAd,KAAiC;AACrEC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EAAiBC,MAAjB,EAAyBP,KAAzB;;AAEA,QAAIA,KAAK,CAACU,MAAN,IAAgBV,KAAK,CAAC,CAAD,CAAL,CAASU,MAA7B,EAAqC;AACnC,YAAMC,SAAS,GAAGX,KAAK,CAACY,KAAN,EAAlB;AACAD,MAAAA,SAAS,CAACL,GAAD,CAAT,CAAeC,MAAf,IAAyBN,aAAa,CAACY,QAAd,EAAzB;AAEAL,MAAAA,OAAO,CAACC,GAAR,CAAYE,SAAZ,EAAuBL,GAAvB,EAA4BC,MAA5B;AAGAJ,MAAAA,WAAW,CAAC;AACVH,QAAAA,KAAK,EAAEW,SADG;AAEVV,QAAAA,aAAa,EAAEA,aAAa,GAAG;AAFrB,OAAD,CAAX;AAID;AACF,GAf8B,EAe5B,CAACD,KAAD,CAf4B,CAA/B;AAiBAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,KAAK,GAAGc,KAAK,CAACf,SAAS,CAACgB,MAAX,CAAL,CACXC,IADW,CACNF,KAAK,CAACf,SAAS,CAACkB,KAAX,CAAL,CAAuBD,IAAvB,CAA4B,GAA5B,CADM,CAAd;AAGAR,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AAEAG,IAAAA,WAAW,CAAC;AACVH,MAAAA,KADU;AAEVK,MAAAA;AAFU,KAAD,CAAX;AAID,GAVQ,EAUN,CAACA,WAAD,EAAcL,KAAd,CAVM,CAAT;AAcA,QAAMkB,IAAI,GAAGxB,OAAO,CAAC,MAAMM,KAAK,CAACmB,GAAN,CAAU,CAACb,GAAD,EAAMc,KAAN,kBACnC,QAAC,GAAD;AAAyB,IAAA,OAAO,EAAEd,GAAlC;AAAuC,IAAA,MAAM,EAAEc;AAA/C,KAAW,MAAKA,KAAM,EAAtB;AAAA;AAAA;AAAA;AAAA,UADyB,CAAP,EAEjB,CAACpB,KAAD,CAFiB,CAApB;AAIA,sBACE;AAAA,cACGkB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhDD;;GAAMrB,I;;KAAAA,I;AAkDN,eAAeA,IAAf","sourcesContent":["import { useCallback, useEffect, useMemo, VFC } from \"react\";\n\nimport Row from \"../../components/row\";\n\nimport GameContext from \"../../store/context/game\";\n\nconst Game: VFC = () => {\n\n  const { data: {\n    fieldSize,\n    field,\n    currentNumber\n  }, setData: setGameData } = GameContext.useContext();\n\n  const onCellClick = useCallback(() => (row: number, column: number) => {\n    console.log(row, column, field);\n\n    if (field.length && field[0].length) {\n      const fieldCopy = field.slice();\n      fieldCopy[row][column] = currentNumber.toString();\n\n      console.log(fieldCopy, row, column);\n\n\n      setGameData({\n        field: fieldCopy,\n        currentNumber: currentNumber + 1\n      });\n    }\n  }, [field]);\n\n  useEffect(() => {\n    const field = Array(fieldSize.height)\n      .fill(Array(fieldSize.width).fill('0'));\n\n    console.log(field);\n\n    setGameData({\n      field,\n      onCellClick\n    });\n  }, [onCellClick, field]);\n\n\n\n  const rows = useMemo(() => field.map((row, index) => (\n    <Row key={`row${index}`} content={row} number={index} />)\n  ), [field]);\n\n  return (\n    <section>\n      {rows}\n    </section>\n  )\n};\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}