{"ast":null,"code":"var _jsxFileName = \"/Users/pc/KolomoyetsProjects/Study/project-zigzag/project-zigzag/client/src/components/cell/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport classnames from 'classnames';\nimport GameContext from \"../../store/context/game\";\nimport './cell.scss';\nimport { checkRow } from \"../../views/game\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Cell = _ref => {\n  _s();\n\n  let {\n    content,\n    row,\n    column\n  } = _ref;\n  const {\n    data: {\n      onCellClick,\n      field,\n      lastTry,\n      avaliableCells\n    },\n    setData\n  } = GameContext.useContext();\n  const [isAllowedToGo, setIsAllowedToGo] = useState(true);\n  useEffect(() => {\n    setIsAllowedToGo(checkRow(content, row, column, field, lastTry));\n\n    if (isAllowedToGo) {\n      setData({\n        avaliableCells: avaliableCells + 1\n      });\n    }\n  }, [content, isAllowedToGo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classnames('cell__container', {\n      'cell__available': isAllowedToGo,\n      'cell__filled': Number(content) !== 0\n    }),\n    onClick: () => isAllowedToGo ? onCellClick(row, column, field, lastTry) : {},\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Cell, \"3GhawU1ekWREi+1vdYBM+omjY+8=\");\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/Users/pc/KolomoyetsProjects/Study/project-zigzag/project-zigzag/client/src/components/cell/index.tsx"],"names":["useEffect","useState","classnames","GameContext","checkRow","Cell","content","row","column","data","onCellClick","field","lastTry","avaliableCells","setData","useContext","isAllowedToGo","setIsAllowedToGo","Number"],"mappings":";;;AAAA,SAAaA,SAAb,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,aAAP;AACA,SAASC,QAAT,QAAyB,kBAAzB;;;AAQA,MAAMC,IAAmB,GAAG,QAA8B;AAAA;;AAAA,MAA7B;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,GAAX;AAAgBC,IAAAA;AAAhB,GAA6B;AACxD,QAAM;AAAEC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,KAAf;AAAsBC,MAAAA,OAAtB;AAA+BC,MAAAA;AAA/B,KAAR;AAAyDC,IAAAA;AAAzD,MAAqEX,WAAW,CAACY,UAAZ,EAA3E;AAEA,QAAM,CAAEC,aAAF,EAAiBC,gBAAjB,IAAsChB,QAAQ,CAAC,IAAD,CAApD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,gBAAgB,CAACb,QAAQ,CAACE,OAAD,EAAUC,GAAV,EAAeC,MAAf,EAAuBG,KAAvB,EAA8BC,OAA9B,CAAT,CAAhB;;AAEA,QAAII,aAAJ,EAAmB;AACjBF,MAAAA,OAAO,CAAC;AAACD,QAAAA,cAAc,EAAEA,cAAc,GAAG;AAAlC,OAAD,CAAP;AACD;AACF,GANQ,EAMN,CAACP,OAAD,EAAUU,aAAV,CANM,CAAT;AAQA,sBACE;AACE,IAAA,SAAS,EAAEd,UAAU,CAAC,iBAAD,EAAoB;AACvC,yBAAmBc,aADoB;AAEvC,sBAAgBE,MAAM,CAACZ,OAAD,CAAN,KAAoB;AAFG,KAApB,CADvB;AAKE,IAAA,OAAO,EAAE,MAAMU,aAAa,GAAGN,WAAW,CAACH,GAAD,EAAMC,MAAN,EAAcG,KAAd,EAAqBC,OAArB,CAAd,GAA8C,EAL5E;AAAA,cAOGN;AAPH;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAxBD;;GAAMD,I;;KAAAA,I;AA0BN,eAAeA,IAAf","sourcesContent":["import { FC, useEffect, useState } from \"react\";\nimport classnames from 'classnames';\n\nimport GameContext from \"../../store/context/game\";\n\nimport './cell.scss';\nimport { checkRow } from \"../../views/game\";\n\ntype CellProps = {\n  content: string;\n  column: number;\n  row: number;\n};\n\nconst Cell: FC<CellProps> = ({ content, row, column }) => {\n  const { data: { onCellClick, field, lastTry, avaliableCells }, setData } = GameContext.useContext();\n\n  const [ isAllowedToGo, setIsAllowedToGo ] = useState(true);\n\n  useEffect(() => {\n    setIsAllowedToGo(checkRow(content, row, column, field, lastTry));\n\n    if (isAllowedToGo) {\n      setData({avaliableCells: avaliableCells + 1})\n    }\n  }, [content, isAllowedToGo]);\n\n  return (\n    <div\n      className={classnames('cell__container', {\n        'cell__available': isAllowedToGo,\n        'cell__filled': Number(content) !== 0\n      })}\n      onClick={() => isAllowedToGo ? onCellClick(row, column, field, lastTry) : {}}\n    >\n      {content}\n    </div>\n  )\n};\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}