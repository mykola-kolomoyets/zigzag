{"ast":null,"code":"var _jsxFileName = \"/Users/pc/KolomoyetsProjects/Study/project-zigzag/project-zigzag/client/src/views/game/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect } from \"react\";\nimport Row from \"../../components/row\";\nimport GameContext from \"../../store/context/game\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const {\n    data: {\n      fieldSize,\n      field,\n      currentNumber\n    },\n    setData: setGameData\n  } = GameContext.useContext();\n\n  const onCellClick = (row, column, field, currentCellNumber) => {\n    const fieldCopy = field.slice();\n    fieldCopy[row][column] = currentCellNumber.toString();\n    console.log(fieldCopy, row, column, currentNumber);\n    setGameData({\n      field: fieldCopy,\n      currentNumber: currentCellNumber + 1\n    });\n  };\n\n  useEffect(() => {\n    const field = Array(fieldSize.width).fill('0').map(() => Array(fieldSize.height).fill('0'));\n    setGameData({\n      field,\n      onCellClick\n    });\n  }, [fieldSize]);\n  const rows = useCallback(() => field.map((row, index) => /*#__PURE__*/_jsxDEV(Row, {\n    content: row,\n    number: index\n  }, `row${index}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this)), [field])();\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: rows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"4VivoltJhLoQNrrbXxecwTMoEiQ=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/pc/KolomoyetsProjects/Study/project-zigzag/project-zigzag/client/src/views/game/index.tsx"],"names":["useCallback","useEffect","Row","GameContext","Game","data","fieldSize","field","currentNumber","setData","setGameData","useContext","onCellClick","row","column","currentCellNumber","fieldCopy","slice","toString","console","log","Array","width","fill","map","height","rows","index"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAqD,OAArD;AAEA,OAAOC,GAAP,MAAgB,sBAAhB;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;;;AAEA,MAAMC,IAAS,GAAG,MAAM;AAAA;;AAEtB,QAAM;AAAEC,IAAAA,IAAI,EAAE;AACZC,MAAAA,SADY;AAEZC,MAAAA,KAFY;AAGZC,MAAAA;AAHY,KAAR;AAIHC,IAAAA,OAAO,EAAEC;AAJN,MAIsBP,WAAW,CAACQ,UAAZ,EAJ5B;;AAMA,QAAMC,WAAW,GAAG,CAACC,GAAD,EAAcC,MAAd,EAA8BP,KAA9B,EAAiDQ,iBAAjD,KAA+E;AAC/F,UAAMC,SAAS,GAAGT,KAAK,CAACU,KAAN,EAAlB;AACAD,IAAAA,SAAS,CAACH,GAAD,CAAT,CAAeC,MAAf,IAAyBC,iBAAiB,CAACG,QAAlB,EAAzB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ,EAAuBH,GAAvB,EAA4BC,MAA5B,EAAoCN,aAApC;AAEAE,IAAAA,WAAW,CAAC;AACVH,MAAAA,KAAK,EAAES,SADG;AAEVR,MAAAA,aAAa,EAAEO,iBAAiB,GAAG;AAFzB,KAAD,CAAX;AAIH,GAVD;;AAYAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,KAAK,GAAGc,KAAK,CAACf,SAAS,CAACgB,KAAX,CAAL,CAAuBC,IAAvB,CAA4B,GAA5B,EAAiCC,GAAjC,CAAqC,MAAMH,KAAK,CAACf,SAAS,CAACmB,MAAX,CAAL,CAAwBF,IAAxB,CAA6B,GAA7B,CAA3C,CAAd;AAEAb,IAAAA,WAAW,CAAC;AACVH,MAAAA,KADU;AAEVK,MAAAA;AAFU,KAAD,CAAX;AAID,GAPQ,EAON,CAACN,SAAD,CAPM,CAAT;AAUA,QAAMoB,IAAI,GAAG1B,WAAW,CAAC,MAAMO,KAAK,CAACiB,GAAN,CAAU,CAACX,GAAD,EAAMc,KAAN,kBACvC,QAAC,GAAD;AAAyB,IAAA,OAAO,EAAEd,GAAlC;AAAuC,IAAA,MAAM,EAAEc;AAA/C,KAAW,MAAKA,KAAM,EAAtB;AAAA;AAAA;AAAA;AAAA,UAD6B,CAAP,EAEpB,CAACpB,KAAD,CAFoB,CAAX,EAAb;AAIA,sBACE;AAAA,cACGmB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvCD;;GAAMtB,I;;KAAAA,I;AAyCN,eAAeA,IAAf","sourcesContent":["import { useCallback, useEffect, useMemo, VFC } from \"react\";\n\nimport Row from \"../../components/row\";\n\nimport GameContext from \"../../store/context/game\";\n\nconst Game: VFC = () => {\n\n  const { data: {\n    fieldSize,\n    field,\n    currentNumber\n  }, setData: setGameData } = GameContext.useContext();\n\n  const onCellClick = (row: number, column: number, field: string[][], currentCellNumber: number) => {\n      const fieldCopy = field.slice();\n      fieldCopy[row][column] = currentCellNumber.toString();\n\n      console.log(fieldCopy, row, column, currentNumber);\n\n      setGameData({\n        field: fieldCopy,\n        currentNumber: currentCellNumber + 1\n      });\n  };\n\n  useEffect(() => {\n    const field = Array(fieldSize.width).fill('0').map(() => Array(fieldSize.height).fill('0'));\n\n    setGameData({\n      field,\n      onCellClick\n    });\n  }, [fieldSize]);\n\n\n  const rows = useCallback(() => field.map((row, index) => (\n    <Row key={`row${index}`} content={row} number={index} />))\n    , [field])();\n\n  return (\n    <section>\n      {rows}\n    </section>\n  )\n};\n\nexport default Game;"]},"metadata":{},"sourceType":"module"}